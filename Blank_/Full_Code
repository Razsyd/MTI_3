/*This is the code for Blank, an interactive storage system by J.Ponce, R.Syed, and Z.Wang
 Parts of this code was built referencing arduino basics guide over at arduino.cc/Tutorial
 
 Connections
LCD I2C
VDD > 5V
GND > GND
SDA > A4
SCL > A5

Distance Sensor
VCC > 5V
TRIG > 9
ECHO > 8
GND > GND

Servo
Brown > GND
Red > 5V
Orange > 6

Piezo buzzer
Positive > 7
Negative > GND

Buttons (All buttons connect to GND via 220 ohm Resistor)
Blue - Cold > A3
Red - Rain > A2
Yellow - Sunny > A1
Green - Windy > A0

LEDs (All Leds connect to GND via 220hm Resistors)
Blue - Cold > 10
Red - Rain > 11
Yellow - Sunny > 12
Green - Windy > 13
*/

#include <CuteBuzzerSounds.h>
#include <Sounds.h>
#include <Servo.h>
#include <LiquidCrystal_I2C.h>
#include <Wire.h>
#include <Stepper.h>


      
// distance sensor  
const int trigPin = 9;
const int echoPin = 8;
//long duration;
int distance;

//LCD
    
int lcdColumns = 16;
int lcdRows = 2;
LiquidCrystal_I2C lcd(0x27, lcdColumns, lcdRows);

//Hardcode Buttons

int buttonState = 0;
int ColdButton = A3;
int WindButton = A2;
int RainButton = A1;
int SunnyButton = A0;

//LED

int ColdLED = 13;
int WindLED = 12;
int RainLED = 11;
int SunnyLED = 10;

//Piezo buzzer

int buzzer =7;
int sunnyTone[] = {
  NOTE_A4, NOTE_B4, NOTE_C3
};

//Servo
Servo myservo;
int angle =0;
int pos =0;

void setup()
{
   Serial.begin(9600);



   // Distance Sensor 
    pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
    pinMode(echoPin, INPUT); // Sets the echoPin as an Input
   
  //LCD
  lcd.begin();                // initialize LCD                      
  lcd.backlight();            // turn on LCD backlight
  lcd.setCursor(0, 0);
  lcd.print("Hello");

  //Buttons as input
  pinMode(WindButton, INPUT);
  pinMode(ColdButton, INPUT);
  pinMode(RainButton, INPUT);
  pinMode(SunnyButton, INPUT);

  //LED as output
  pinMode(SunnyLED, OUTPUT);
  pinMode(RainLED, OUTPUT);
  pinMode(ColdLED, OUTPUT);
  pinMode(WindLED, OUTPUT);

  //Piezo as output
  pinMode(buzzer, OUTPUT) ;
  cute.init(buzzer);

  //Servo
  myservo.attach(6);
  myservo.write(pos);                       // To make sure servo starts at 0
  pinMode(6,INPUT);

}

void sweep (){                              // Servo goes back and forth from 0 to 180
  
  for (angle = 0; angle < 180; angle++)  
    {                                  
      myservo.write(angle);               
      delay(5);                   
    } 
    // now scan back from 180 to 0 degrees
    for (angle = 180; angle > 0; angle--)
    {                                
      myservo.write(angle);           
      delay(5);       
    } 
  }


void buffering()                        // Function to make LEDs blink, LCD displays message and servo spins the dial

{
    lcd.setCursor(0,0);                //LCD
    lcd.print("Calculating");
    lcd.setCursor(0, 1);
    lcd.print("Weather...");
    delay (100);
   
    
    digitalWrite(SunnyLED, HIGH);        //LED on and off
    delay(80);
    digitalWrite(SunnyLED, LOW);         
    delay(80);
    digitalWrite(RainLED, HIGH);
    delay(80);
    digitalWrite(RainLED, LOW);
    delay(80);
    digitalWrite(ColdLED, HIGH);
    delay(80);
    digitalWrite(ColdLED, LOW);
     delay(80);
    digitalWrite(WindLED, HIGH);
    delay(80);
    digitalWrite(WindLED, LOW);

    sweep();                        //Servo spins the dial to communicate calculating state
     
  }

void Windy() {    
  
    lcd.setCursor(0,0);
    lcd.print("It's a windy day");
    lcd.setCursor(0, 1);
    lcd.print("Temperature: 12C");
    delay (3000);  
      
    cute.play(S_MODE2);
  
  }

void Cold() {
   
    lcd.setCursor(0,0);
    lcd.print("It's a cold day");
    lcd.setCursor(0, 1);
    lcd.print("Temperature: 6C");
    delay (3000);

    cute.play(S_SLEEPING);

    
  }

void Rain() {
  
    lcd.setCursor(0,0);
    lcd.print("It's raining");
    lcd.setCursor(0, 1);
    lcd.print("Temperature: 15C");
    delay (3000); 

    cute.play(S_SAD);
  
  }

void Sunny() {

    lcd.setCursor(0,0);
    lcd.print("It's a sunny day");
    lcd.setCursor(0, 1);
    lcd.print("Temperature: 20C");
    delay (3000);
    
    cute.play(S_CONNECTION);
  
  }




void loop()
{



      // Clears the trigPin
    
    digitalWrite(trigPin, LOW);
    
    delayMicroseconds(2);
    
    // Sets the trigPin on HIGH state for 10 micro seconds
    
    digitalWrite(trigPin, HIGH);
    
    delayMicroseconds(10);
    
    digitalWrite(trigPin, LOW);
    
    // Reads the echoPin, returns the sound wave travel time in microseconds
    
    duration = pulseIn(echoPin, HIGH);
    
    // Calculating the distance
    
    distance = duration*0.034/2;
    
    // Prints the distance on the Serial Monitor
    
    Serial.print("Distance: ");
    
    Serial.println(distance);

    
    
    if (distance < 10) { 

    buttonState = digitalRead (SunnyButton && WindButton && ColdButton && RainButton);
    if (buttonState == LOW){
    buffering ();
    delay (100);
    
    }


     // If Wind button is pushed, activate LCD Message, LED and Tune  
  buttonState = digitalRead(WindButton);
  
  if (buttonState == HIGH) {
    digitalWrite(WindLED, HIGH);
   Windy();
    
    } else {
    digitalWrite(WindLED, LOW);
    lcd.clear();
  }

    delay(100);



    // If Cold button is pushed, activate LCD Message, LED and Tune
  buttonState = digitalRead(ColdButton);
  if (buttonState == HIGH) {
    digitalWrite(ColdLED, HIGH);

   Cold(); 
  
  } else {
    digitalWrite(ColdLED, LOW);
    lcd.clear();

  }
 
  
  delay(100); 

 
    // If Rain button is pushed, activate LCD Message, LED and Tune
      
  buttonState = digitalRead(RainButton);

  if (buttonState == HIGH) {
    digitalWrite(RainLED, HIGH);
    
   Rain();
  
    
  } else {
    digitalWrite(RainLED, LOW);
    lcd.clear();

  }
  
  
  delay(100); 


  // If Sunny button is pushed, activate LCD Message, LED and Tune

  buttonState = digitalRead(SunnyButton);
  if (buttonState == HIGH) {
    digitalWrite(SunnyLED, HIGH);
    
    Sunny();
  
  } else {
    digitalWrite(SunnyLED, LOW);
    lcd.clear();

   }
 
  delay(100);

 
  }                                          // End of If statement for distance sensor

}                                           // End of Loop
