#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#include <Stepper.h>
      
    // distance sensor  
      const int trigPin = 9;
      const int echoPin = 8;
     // defines variables
      long duration;
      int distance;

 

  const int stepsPerRevolution = 2038;
  Stepper myStepper = Stepper(stepsPerRevolution, 8, 10, 9, 11);



    
int lcdColumns = 16;
int lcdRows = 2;


LiquidCrystal_I2C lcd(0x27, lcdColumns, lcdRows);

int buttonState = 0;

int SunnyButton = A3;
int RainButton = A2;
int ColdButton = A1;
int WindButton = A0;

int SunnyLED = 13;
int RainLED = 12;
int ColdLED = 11;
int WindLED = 10;

void setup()
{
    Serial.begin(9600);


   // Distance Sensor 
    pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
    pinMode(echoPin, INPUT); // Sets the echoPin as an Input
   

  lcd.begin();                // initialize LCD                      
  lcd.backlight();            // turn on LCD backlight
  lcd.setCursor(0, 0);
  

  pinMode(WindButton, INPUT);
  pinMode(ColdButton, INPUT);
  pinMode(RainButton, INPUT);
  pinMode(SunnyButton, INPUT);
  
  pinMode(SunnyLED, OUTPUT);
  pinMode(RainLED, OUTPUT);
  pinMode(ColdLED, OUTPUT);
  pinMode(WindLED, OUTPUT);
}

void loop()
{
      // Stepper
        stepVale = (SPR * goToAngle)/360;


      // Clears the trigPin
    
    digitalWrite(trigPin, LOW);
    
    delayMicroseconds(2);
    
    // Sets the trigPin on HIGH state for 10 micro seconds
    
    digitalWrite(trigPin, HIGH);
    
    delayMicroseconds(10);
    
    digitalWrite(trigPin, LOW);
    
    // Reads the echoPin, returns the sound wave travel time in microseconds
    
    duration = pulseIn(echoPin, HIGH);
    
    // Calculating the distance
    
    distance = duration*0.034/2;
    
    // Prints the distance on the Serial Monitor
    
    Serial.print("Distance: ");
    
    Serial.println(distance);
    
    
    if (distance < 10) {
   
    // Rotate CW slowly at 5 RPM
  // myStepper.setSpeed(18);
  // myStepper.step(stepsPerRevolution);
  
    lcd.setCursor(0,0);
    lcd.print("Calculating");
    lcd.setCursor(0, 1);
    lcd.print("Weather...");
    delay (100);
   
    
    digitalWrite(SunnyLED, HIGH);        //LED on
    delay(80);
    digitalWrite(SunnyLED, LOW);         //LED off
    delay(80);
    digitalWrite(RainLED, HIGH);
    delay(80);
    digitalWrite(RainLED, LOW);
    delay(80);
    digitalWrite(ColdLED, HIGH);
    delay(80);
    digitalWrite(ColdLED, LOW);
     delay(80);
    digitalWrite(WindLED, HIGH);
    delay(80);
    digitalWrite(WindLED, LOW);

      }
       else {
    lcd.clear();
  }

  
  // read the state of the pushbutton
  buttonState = digitalRead(WindButton);
  // check if pushbutton is pressed. if it is, the
  // button state is HIGH
  
  if (buttonState == HIGH) {
    digitalWrite(WindLED, HIGH);

    
    lcd.setCursor(0,0);
    lcd.print("It's a windy day");
    lcd.setCursor(0, 1);
    lcd.print("Temperature: 12C");
    delay (3000);  
  
  } else {
    digitalWrite(WindLED, LOW);
    lcd.clear();
  }
  delay(100); // Delay a little bit to improve simulation performance

  buttonState = digitalRead(ColdButton);
  // check if pushbutton is pressed. if it is, the
  // button state is HIGH
  if (buttonState == HIGH) {
    digitalWrite(ColdLED, HIGH);

    
    lcd.setCursor(0,0);
    lcd.print("It's a cold day");
    lcd.setCursor(0, 1);
    lcd.print("Temperature: 6C");
    delay (3000); 
  
  } else {
    digitalWrite(ColdLED, LOW);
    lcd.clear();

  }
  delay(100); // Delay a little bit to improve simulation performance

  buttonState = digitalRead(RainButton);
  // check if pushbutton is pressed. if it is, the
  // button state is HIGH
  if (buttonState == HIGH) {
    digitalWrite(RainLED, HIGH);
    
   
    lcd.setCursor(0,0);
    lcd.print("It's raining");
    lcd.setCursor(0, 1);
    lcd.print("Temperature: 15C");
    delay (3000); 

    
  } else {
    digitalWrite(RainLED, LOW);
    lcd.clear();

  }
  delay(100); // Delay a little bit to improve simulation performance

  buttonState = digitalRead(SunnyButton);
  // check if pushbutton is pressed. if it is, the
  // button state is HIGH
  if (buttonState == HIGH) {
    digitalWrite(SunnyLED, HIGH);
    
  
    lcd.setCursor(0,0);
    lcd.print("It's a sunny day");
    lcd.setCursor(0, 1);
    lcd.print("Temperature: 20C");
    delay (3000);
  
  
  } else {
    digitalWrite(SunnyLED, LOW);
    lcd.clear();

  }
  delay(100); // Delay a little bit to improve simulation performance




  
}
